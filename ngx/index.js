import { WebPlugin, registerPlugin } from '@capacitor/core';
import { Observable } from 'rxjs';

const EliSensor = registerPlugin('EliSensor', {
  android: () => import('./index.js').then(m => new m.EliSensor()),
  ios: () => import('./index.js').then(m => new m.EliSensor()),
});

export class EliSensorCapacitor {
  static getSensorList() {
    return EliSensor.getSensorList();
  }

  static getCurrent() {
    return EliSensor.getCurrent();
  }

  static watch(options) {
    return new Observable(observer => {
      EliSensor.watch(options).then(watchId => {
        const callback = data => observer.next(data);
        observer.add(() => EliSensor.clearWatch(watchId));
      }).catch(error => observer.error(error));
    });
  }
}
export { EliSensor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2VsaS1zZW5zb3Ivbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBSU4sTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXFESCw2QkFBaUI7Ozs7SUFHOUMsaUNBQWE7SUFLYiw4QkFBVTtJQUlWLHlCQUFLLEdBQUwsVUFBTSxPQUEwQjtRQUM5QixPQUFPLElBQUksVUFBVSxDQUFnQixVQUFDLFFBQWE7WUFDakQsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQ3ZDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUM1QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDNUIsT0FBTyxDQUNSLENBQUM7WUFDRixPQUFPLGNBQU0sT0FBQSxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQXJCVSxTQUFTO1FBRHJCLFVBQVUsRUFBRTtPQUNBLFNBQVM7b0JBM0R0QjtFQTJEK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBQbHVnaW4sXG4gIENvcmRvdmEsXG4gIElvbmljTmF0aXZlUGx1Z2luLFxufSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIEVsaVNlbnNvclR5cGUge1xuICBzdHJpbmdfdHlwZTogc3RyaW5nO1xuICB0eXBlOiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRWxpU2Vuc29yRGF0YSB7XG4gIGRhdGE/OiBhbnk7XG4gIHRpbWVzdGFtcD86IGFueTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRWxpU2Vuc29yT3B0aW9ucyB7XG4gIGZyZXF1ZW5jeT86IG51bWJlcjtcbiAgc2Vuc29yX3R5cGU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgRWxpIFNlbnNvclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiB0byByZWFkIHNlbnNvcnMgaW50byBpb25pYyBuYXRpdmUuXG4gKiBGdXR1cmUgaW1wbGVtZW50YXRpb24gb2YgaU9TIHN1cHBvcnQgaXMgYWxzbyBpbnRlbmRlZC5cbiAqIFdpbGwgbm90IGdpdmUgc3VwcG9ydCBmb3IgdGhpcyBwcm9qZWN0IGFzIGl0IGlzIGZvciBwZXJzb25hbCB1c2Ugb25seS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEVsaVNlbnNvciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZWxpLXNlbnNvcic7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxpU2Vuc29yOiBFbGlTZW5zb3IpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmVsaVNlbnNvci53YXRjaChvcHRpb25zOiBFbGlTZW5zb3JPcHRpb25zKVxuICogICAuc3Vic2NyaWJlKChyZXN1bHQ6IEVsaVNlbnNvckRhdGEpID0+IHtcbiAqICAgICB2YXIgZXhhbXBsZSA9IHJlc3VsdC5kYXRhO1xuICogICAgIGNvbnNvbGUubG9nKCd3YXRjaCcsIGV4YW1wbGUpO1xuICogICAgIHJldHVybiBleGFtcGxlO1xuICogICB9KVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdFbGlTZW5zb3InLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1lbGktc2Vuc29yJywgLy8gbnBtIHBhY2thZ2UgbmFtZSwgZXhhbXBsZTogY29yZG92YS1wbHVnaW4tY2FtZXJhXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5lbGlTZW5zb3InLCAvLyB0aGUgdmFyaWFibGUgcmVmZXJlbmNlIHRvIGNhbGwgdGhlIHBsdWdpbiwgZXhhbXBsZTogbmF2aWdhdG9yLmdlb2xvY2F0aW9uXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2FybGtyb2VnZXIvY29yZG92YS1wbHVnaW4tZWxpLXNlbnNvci5naXQnLCAvLyB0aGUgZ2l0aHViIHJlcG9zaXRvcnkgVVJMIGZvciB0aGUgcGx1Z2luXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLCAvLyBBcnJheSBvZiBwbGF0Zm9ybXMgc3VwcG9ydGVkLCBleGFtcGxlOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRWxpU2Vuc29yIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0U2Vuc29yTGlzdCgpOiBQcm9taXNlPEVsaVNlbnNvclR5cGVbXT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0Q3VycmVudCgpOiBQcm9taXNlPEVsaVNlbnNvckRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICB3YXRjaChvcHRpb25zPzogRWxpU2Vuc29yT3B0aW9ucyk6IE9ic2VydmFibGU8RWxpU2Vuc29yRGF0YT4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxFbGlTZW5zb3JEYXRhPigob2JzZXJ2ZXI6IGFueSkgPT4ge1xuICAgICAgY29uc3Qgd2F0Y2hJZCA9IG5hdmlnYXRvci5lbGlTZW5zb3Iud2F0Y2goXG4gICAgICAgIG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksXG4gICAgICAgIG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gICAgICByZXR1cm4gKCkgPT4gbmF2aWdhdG9yLmVsaVNlbnNvci5jbGVhcldhdGNoKHdhdGNoSWQpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=